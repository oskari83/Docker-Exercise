{"ast":null,"code":"import _regeneratorRuntime from\"/Users/oskaripeltonen/Desktop/Docker-ex/Docker-Exercise/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/oskaripeltonen/Desktop/Docker-ex/Docker-Exercise/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import axios from'axios';var baseUrl='/api/blogs';var token=null;var setToken=function setToken(newToken){token=\"bearer \".concat(newToken);};var getAll=function getAll(){var request=axios.get(baseUrl);return request.then(function(response){return response.data;});};var create=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(newObject){var config,response;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:config={headers:{Authorization:token}};_context.next=3;return axios.post(baseUrl,newObject,config);case 3:response=_context.sent;return _context.abrupt(\"return\",response.data);case 5:case\"end\":return _context.stop();}}},_callee);}));return function create(_x){return _ref.apply(this,arguments);};}();var update=function update(id,newObject){var request=axios.put(\"\".concat(baseUrl,\"/\").concat(id),newObject);return request.then(function(response){return response.data;});};var remove=function remove(id,token){var request=axios.delete(\"\".concat(baseUrl,\"/\").concat(id),{headers:{Authorization:token}});return request.then(function(response){return response.data;});};export default{getAll:getAll,setToken:setToken,create:create,update:update,remove:remove};","map":{"version":3,"sources":["/Users/oskaripeltonen/Desktop/Docker-ex/Docker-Exercise/src/services/blogs.js"],"names":["axios","baseUrl","token","setToken","newToken","getAll","request","get","then","response","data","create","newObject","config","headers","Authorization","post","update","id","put","remove","delete"],"mappings":"yVAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,GAAMC,CAAAA,OAAO,CAAG,YAAhB,CAEA,GAAIC,CAAAA,KAAK,CAAG,IAAZ,CAEA,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAAAC,QAAQ,CAAI,CAC3BF,KAAK,kBAAaE,QAAb,CAAL,CACD,CAFD,CAIA,GAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,EAAM,CACnB,GAAMC,CAAAA,OAAO,CAAGN,KAAK,CAACO,GAAN,CAAUN,OAAV,CAAhB,CACA,MAAOK,CAAAA,OAAO,CAACE,IAAR,CAAa,SAAAC,QAAQ,QAAIA,CAAAA,QAAQ,CAACC,IAAb,EAArB,CAAP,CACD,CAHD,CAKA,GAAMC,CAAAA,MAAM,0FAAG,iBAAMC,SAAN,sIACPC,MADO,CACE,CACbC,OAAO,CAAE,CAAEC,aAAa,CAAEb,KAAjB,CADI,CADF,uBAKUF,CAAAA,KAAK,CAACgB,IAAN,CAAWf,OAAX,CAAoBW,SAApB,CAA+BC,MAA/B,CALV,QAKPJ,QALO,+CAMNA,QAAQ,CAACC,IANH,wDAAH,kBAANC,CAAAA,MAAM,4CAAZ,CASA,GAAMM,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAACC,EAAD,CAAKN,SAAL,CAAmB,CAChC,GAAMN,CAAAA,OAAO,CAAGN,KAAK,CAACmB,GAAN,WAAalB,OAAb,aAAwBiB,EAAxB,EAA8BN,SAA9B,CAAhB,CACA,MAAON,CAAAA,OAAO,CAACE,IAAR,CAAa,SAAAC,QAAQ,QAAIA,CAAAA,QAAQ,CAACC,IAAb,EAArB,CAAP,CACD,CAHD,CAKA,GAAMU,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAACF,EAAD,CAAIhB,KAAJ,CAAc,CAC3B,GAAMI,CAAAA,OAAO,CAAGN,KAAK,CAACqB,MAAN,WAAgBpB,OAAhB,aAA2BiB,EAA3B,EAAgC,CAC9CJ,OAAO,CAAE,CACPC,aAAa,CAAEb,KADR,CADqC,CAAhC,CAAhB,CAIA,MAAOI,CAAAA,OAAO,CAACE,IAAR,CAAa,SAAAC,QAAQ,QAAIA,CAAAA,QAAQ,CAACC,IAAb,EAArB,CAAP,CACD,CAND,CAQA,cAAe,CAAEL,MAAM,CAANA,MAAF,CAAUF,QAAQ,CAARA,QAAV,CAAoBQ,MAAM,CAANA,MAApB,CAA4BM,MAAM,CAANA,MAA5B,CAAoCG,MAAM,CAANA,MAApC,CAAf","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/blogs'\n\nlet token = null\n\nconst setToken = newToken => {\n  token = `bearer ${newToken}`\n}\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = async newObject => {\n  const config = {\n    headers: { Authorization: token },\n  }\n\n  const response = await axios.post(baseUrl, newObject, config)\n  return response.data\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nconst remove = (id,token) => {\n  const request = axios.delete(`${baseUrl}/${id}`,{\n    headers: {\n      Authorization: token\n    } })\n  return request.then(response => response.data)\n}\n\nexport default { getAll, setToken, create, update, remove }"]},"metadata":{},"sourceType":"module"}